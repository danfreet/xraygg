#!/bin/bash

# === –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å DOS-—Å–∏–º–≤–æ–ª—ã (CRLF) –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===
if file "$0" | grep -q CRLF; then
  echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ CRLF ‚Üí LF (Windows ‚Üí Unix)"
  sed -i 's/\r\$//' "$0"
  exec bash "$0" "$@"
fi

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ===
for cmd in curl unzip; do
  if ! command -v "$cmd" &> /dev/null; then
    echo "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: $cmd"
    echo "üëâ –ü—Ä–∏–º–µ—Ä: sudo apt install $cmd"
    MISSING=true
  fi
done
if [[ "$MISSING" == true ]]; then
  exit 1
fi

# === –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ===
PORT=443
SNI="www.google.com"
MY_IP=$(curl -s https://api.ipify.org)
CLIENTS=()
INSTALL_SERVICE=false

# === –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ===
print_help() {
  echo "\nUsage: bash xraygg-installer.sh [OPTIONS]\n"
  echo "Options:"
  echo "  --port <port>             –£–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 443)"
  echo "  --sni <domain>            –£–∫–∞–∑–∞—Ç—å SNI –¥–æ–º–µ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é www.google.com)"
  echo "  --ip <your_ip>            –í–Ω–µ—à–Ω–∏–π IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é autodetect)"
  echo "  --client <name>           –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (–º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑)"
  echo "  --install-service         –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å systemd-—Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"
  echo "  -h, --help                –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
  exit 0
}

while [[ "$#" -gt 0 ]]; do
  case $1 in
    --port) PORT="$2"; shift 2;;
    --sni) SNI="$2"; shift 2;;
    --ip) MY_IP="$2"; shift 2;;
    --client) CLIENTS+=("$2"); shift 2;;
    --install-service) INSTALL_SERVICE=true; shift;;
    -h|--help) print_help;;
    *) echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"; print_help;;
  esac
done

if [[ -z "$MY_IP" ]]; then
  echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP. –£–∫–∞–∂–∏—Ç–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ --ip"
  exit 1
fi


# === –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Xray ===
echo "üì• –ü—Ä–æ–≤–µ—Ä–∫–∞ Xray..."
if [ ! -f "./xray" ]; then
  ARCH=$(uname -m)
  case "$ARCH" in
    x86_64) ARCH_DL="64";;
    aarch64) ARCH_DL="arm64-v8a";;
    *) echo "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH"; exit 1;;
  esac
  mkdir -p ./xray-tmp
  curl -L -o xray.zip https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-${ARCH_DL}.zip
  unzip xray.zip -d ./xray-tmp || { echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å xray.zip"; exit 1; }
  mv ./xray-tmp/xray ./xray && chmod +x ./xray || { echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å Xray"; exit 1; }
  mv ./xray-tmp/geo* .
  rm -rf xray.zip xray-tmp
fi

if [ ! -f "./xray" ]; then
  echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å Xray."
  exit 1
fi

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Reality –∫–ª—é—á–µ–π ===
KEYS=$(./xray x25519 2>/dev/null)
PRIVATE_KEY=$(echo "$KEYS" | grep "Private" | awk '{print $3}')
PUBLIC_KEY=$(echo "$KEYS" | grep "Public" | awk '{print $3}')
SHORT_ID="12345678"

echo "üîë Reality –∫–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:"
echo "   Private: $PRIVATE_KEY"
echo "   Public : $PUBLIC_KEY"

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ===
CLIENTS_JSON=""
LINKS=""

for NAME in "${CLIENTS[@]}"; do
  UUID=$(cat /proc/sys/kernel/random/uuid)
  CLIENTS_JSON+="
          { \"id\": \"$UUID\", \"flow\": \"\", \"email\": \"$NAME\" },"
  LINKS+=$'\n'"vless://$UUID@$MY_IP:$PORT?encryption=none&security=reality&type=tcp&fp=chrome&pbk=$PUBLIC_KEY&sid=$SHORT_ID&sni=$SNI&alpn=h2#$NAME"
done
CLIENTS_JSON=$(echo "$CLIENTS_JSON" | sed '$ s/},/}/')

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è config.json ===
cat > config.json <<EOF
{
  "log": { "loglevel": "warning" },
  "inbounds": [
    {
      "port": $PORT,
      "protocol": "vless",
      "settings": {
        "clients": [
$CLIENTS_JSON
        ],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "tcp",
        "security": "reality",
        "realitySettings": {
          "show": false,
          "dest": "$SNI:443",
          "xver": 0,
          "serverNames": [ "$SNI" ],
          "privateKey": "$PRIVATE_KEY",
          "shortIds": [ "$SHORT_ID" ]
        }
      }
    }
  ],
  "outbounds": [ { "protocol": "freedom" } ]
}
EOF

# === –í—ã–≤–æ–¥ —Å—Å—ã–ª–æ–∫ ===
echo "\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ config.json"
echo "\nüìå VLESS Reality —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤:" && echo "$LINKS"

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ systemd-—Å–µ—Ä–≤–∏—Å–∞ ===
if [[ "$INSTALL_SERVICE" == true ]]; then
  echo "\nüõ†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ systemd-—Å–µ—Ä–≤–∏—Å–∞..."
  sudo mkdir -p /etc/xray
  sudo cp ./xray /etc/xray/xray
  sudo cp ./geo* /etc/xray/
  sudo cp ./config.json /etc/xray/config.json
  sudo chmod +x /etc/xray/xray

  sudo tee /etc/systemd/system/xray.service > /dev/null <<EOF
[Unit]
Description=Xray Service
After=network.target

[Service]
User=nobody
CapabilityBoundingSet=CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_BIND_SERVICE
ExecStart=/etc/xray/xray -config /etc/xray/config.json
Restart=on-failure
RestartSec=5
LimitNOFILE=65535

[Install]
WantedBy=multi-user.target
EOF

  sudo systemctl daemon-reload
  sudo systemctl enable xray
  sudo systemctl start xray
  echo "‚úÖ systemd-—Å–µ—Ä–≤–∏—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω."
else
  echo "‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ systemd-—Å–µ—Ä–≤–∏—Å–∞."
fi
